// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  prov_id
) VALUES (
  $1, $2
) RETURNING id, username, prov_id, created_at
`

type CreateUserParams struct {
	Username string      `json:"username"`
	ProvID   pgtype.Int4 `json:"prov_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.ProvID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProvID,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, prov_id, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProvID,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  username = COALESCE($1, username),
  prov_id = COALESCE($2, prov_id)
WHERE
  id = $3
RETURNING id, username, prov_id, created_at
`

type UpdateUserParams struct {
	Username pgtype.Text `json:"username"`
	ProvID   pgtype.Int4 `json:"prov_id"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Username, arg.ProvID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProvID,
		&i.CreatedAt,
	)
	return i, err
}
